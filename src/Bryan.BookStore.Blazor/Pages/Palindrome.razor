@page "/palindrome"
@using System
@using System.Collections
@using System.Linq
@using System.Collections.Generic


<h3>Palindrome</h3>

<TextEdit Text="@inputText" TextChanged="@GeneratePalindromes"/>


<p role="list">All palindromes: </p>
		@foreach (var palindrome in palindromes)
		{
				<p>@palindrome</p>
		}


@code {
	private string inputText = "cabab";
	private List<string> palindromes = new List<string>();

	public ArrayList PalindromeCreator(string userInput)
	{

		int strLength = userInput.Length;
		char[] charList = userInput.Trim().ToCharArray();
		var palindromes = new HashSet<string>[strLength, strLength];

		//place all characters in a HashSet + initialize for use
		for (int i = 0; i < strLength; i++)
		{
			palindromes[i, i] = new HashSet<string>();
			palindromes[i, i].Add(charList[i].ToString());
			palindromes[i, i].Add("");
		}

		//create another HashSet + initialize for use
		for (int i = 1; i < strLength; i++)
		{
			palindromes[i, i - 1] = new HashSet<string>();
			palindromes[i, i - 1].Add("");
		}

		//generate all palindromes possible, duplicates included
		for (int j = 1; j < strLength; j++)
		{
			for (int i = j - 1; i >= 0; i--)
			{
				palindromes[i, j] = new HashSet<string>();

				//j has the palindrome, therefore add those to the new HashSet
				foreach (var p in palindromes[i, j - 1]) palindromes[i, j].Add(p);
				foreach (var p in palindromes[i + 1, j]) palindromes[i, j].Add(p);
				foreach (var p in palindromes[i + 1, j - 1]) palindromes[i, j].Add(p);

				if (charList[i] == charList[j])
				{
					foreach (var p in palindromes[i + 1, j - 1])
					{
						//checking if palindrome contains space or is the same with charList[i]
						if (p != "" && charList[i].ToString()!= p)
						{
							string strdump = charList[i].ToString() + p + charList[j].ToString();
							palindromes[i, j].Add(strdump);
						}
					}
				}
			}
		}

		palindromes[0, strLength - 1].Remove(""); //removes all empty spaces/null in the HashSet
		return new ArrayList(palindromes[0, strLength - 1].ToList()); //dumps into a new ArrayList unique instances from the HashSet
	}

	Task GeneratePalindromes(string input)
	{
		inputText = input;
		//checks if user entered a space or nothing
		if (input.Length == 0 || input.IsNullOrWhiteSpace())
		{
			Console.WriteLine("Enter characters only");
			return Task.CompletedTask;
		}
		palindromes = new();
		//creates all possible palindromes
		foreach (var palindrome in PalindromeCreator(input))
		{
			palindromes.Add((string)palindrome);
			//	Console.WriteLine(palindrome);
		}
		StateHasChanged();

		return Task.CompletedTask;
	}
}